table(my.names)
my.names <- sample(rep(letters, times = 100))[1:500]
table(my.names)
set.seed(9999)#
my.names <- data.frame(sample(rep(letters, times = 100))[1:500])
str(my.names)
set.seed(9999)#
my.names <- data.frame(table(sample(rep(letters, times = 100))[1:500]))
my.names
my.names <- data.frame(table(sample(rep(letters, times = 100))[1:300]))
my.names
my.hist.data <- subset(my.names, subset = (Freq > 10))
my.hist.data
my.hist.subset <- subset(my.names, subset = (Freq > 10))
my.names <- data.frame(table(sample(rep(letters, times = 100))[1:300]))#
my.hist.select <- subset(my.names, subset = (Freq > 10)) #
my.names.for.hist <- subset(my.names, select = names(my.hist.select))
hist(my.names.for.hist)
str(my.names.for.hist)
set.seed(9999)#
my.names.data <- sample(rep(letters, times = 100))[1:300])#
my.table.data <- data.frame(table(my.names.data))#
my.hist.select <- subset(my.table.data, subset = (Freq > 10)) #
my.names.for.hist <- subset(my.names.data, select = names(my.hist.select))
set.seed(9999)#
my.names.data <- sample(rep(letters, times = 100))[1:300]#
my.table.data <- data.frame(table(my.names.data))#
my.hist.select <- subset(my.table.data, subset = (Freq > 10)) #
my.names.for.hist <- subset(my.names.data, select = names(my.hist.select))
my.hist.select
my.table.data
my.names.for.hist <- subset(my.names.data, select = names(my.hist.select$my.names.data))
set.seed(9999)#
my.names.data <- sample(rep(letters, times = 100))[1:300]#
my.table.data <- data.frame(table(my.names.data))#
my.hist.select <- subset(my.table.data, subset = (Freq > 10)) #
my.names.for.hist <- my.names.data[, names(my.hist.select$my.names.data]
set.seed(9999)#
my.names.data <- sample(rep(letters, times = 100))[1:300]#
my.table.data <- data.frame(table(my.names.data))#
my.hist.select <- subset(my.table.data, subset = (Freq > 10)) #
my.names.for.hist <- my.names.data[, names(my.hist.select$my.names.data)]
names(my.names.data)
my.names.data
my.names.for.hist <- (my.names.data %in% names(my.hist.select$my.names.data))
my.names.for.hist
my.names.for.hist <- (my.names.data %in% my.hist.select$my.names.data)
my.names.for.hist
my.names.for.hist <- my.names.for.hist[my.names.data %in% my.hist.select$my.names.data]
my.names.for.hist
my.names.data
my.names.for.hist <- my.names.data[my.names.data %in% my.hist.select$my.names.data]
my.names.data
set.seed(9999)#
my.names.data <- sample(rep(letters, times = 100))[1:300]
my.names.data
my.table.data <- data.frame(table(my.names.data))
my.table.data
my.hist.select <- subset(my.table.data, subset = (Freq > 10))
my.hist.select
my.hist.data$my.names.data
my.hist.select$my.names.data
my.names.for.hist <- my.names.data[my.names.data %in% as.character(my.hist.select$my.names.data)]
my.names.for.hist
hist(my.names.for.hist)
bar.chart(my.names.for.hist)
barchart(my.names.for.hist)
plot(my.names.for.hist)
plot(bin(my.names.for.hist))
barplot(my.names.for.hist)
plot(*, type = "h")
plot(my.names.for.hist, type = "h")
library(ggplot2)
my.names.for.plot
library(ggplot2)#
set.seed(9999)#
my.names.data <- sample(rep(letters, times = 100))[1:300]#
my.table.data <- data.frame(table(my.names.data))#
my.plot.select <- subset(my.table.data, subset = (Freq > 10))#
as.character(my.plot.select$my.names.data)#
my.names.for.plot <- my.names.data[my.names.data %in% as.character(my.plot.select$my.names.data)]
my.names.for.plot
ggplot(my.names.for.plot, aes(my.names.for.plot)) + geom_bar()
ggplot(my.names.for.plot, aes(my.names.for.plot), stat = bin) + geom_bar()
ggplot(my.names.for.plot, aes(my.names.for.plot)) + geom_bar(stat = bin)
ggplot(my.names.for.plot, aes(my.names.for.plot)) + geom_bar(stat = "bin")
ggplot(factor(my.names.for.plot), aes(factor(my.names.for.plot))) + geom_bar(stat = "bin")
barplot(VADeaths, border = "dark blue")
barplot(my.names.for.plot)
barplot(table(my.names.for.plot))
library(ggplot2)#
set.seed(9999)#
my.names.data <- sample(rep(letters, times = 100))[1:300]#
my.table.data <- data.frame(table(my.names.data))#
my.plot.select <- subset(my.table.data, subset = (Freq > 10))#
my.names.for.plot <- my.names.data[my.names.data %in% as.character(my.plot.select$my.names.data)]#
barplot(table(my.names.for.plot))
set.seed(9999)#
my.names.data <- sample(rep(letters, times = 100))[1:300]#
my.table.data <- data.frame(table(my.names.data))#
my.plot.select <- subset(my.table.data, subset = (Freq > 10))#
my.names.for.plot <- my.names.data[my.names.data %in% as.character(my.plot.select$my.names.data)]#
barplot(table(my.names.for.plot))
names <- rep(letters, times = 100)#
set.seed(9999)#
x <- runif(length(names))#
y <- runif(length(names))#
names.data.frame <- data.frame(names, x, y)#
for (index.for.name in seq(along = letters)) {#
  this.name.data <- subset(names.data.frame, #
    bset = (names = letters[index.for.name]))#
  with(this.name.data, plot(x,y))#
  }
this.name.data
names <- rep(letters, times = 100)#
set.seed(9999)#
x <- runif(length(names))#
y <- runif(length(names))#
names.data.frame <- data.frame(names, x, y)#
for (index.for.name in seq(along = letters)) {#
  this.name.data <- subset(names.data.frame, #
    subset = (names = letters[index.for.name]))#
  with(this.name.data, plot(x,y))#
  }
names <- rep(letters, times = 100)#
set.seed(9999)#
x <- runif(length(names))#
y <- runif(length(names))#
names.data.frame <- data.frame(names, x, y)#
for (index.for.name in seq(along = letters)) {#
  this.name.data <- subset(names.data.frame, #
    subset = (names == letters[index.for.name]))#
  with(this.name.data, plot(x,y))#
  }
names <- rep(letters, times = 100)#
set.seed(9999)#
x <- runif(length(names))#
y <- runif(length(names))#
names.data.frame <- data.frame(names, x, y)#
for (index.for.name in seq(along = letters)) {#
  this.name.data <- subset(names.data.frame, #
    subset = (names == letters[index.for.name]))#
  with(this.name.data, plot(x,y. #
  main = paste("Name =", letters[index.for.name]))#
  }
names <- rep(letters, times = 100)#
set.seed(9999)#
x <- runif(length(names))#
y <- runif(length(names))#
names.data.frame <- data.frame(names, x, y)#
for (index.for.name in seq(along = letters)) {#
  this.name.data <- subset(names.data.frame, #
    subset = (names == letters[index.for.name]))#
  with(this.name.data, plot(x,y. #
  main = paste("Name =", letters[index.for.name])))#
  }
names <- rep(letters, times = 100)#
set.seed(9999)#
x <- runif(length(names))#
y <- runif(length(names))#
names.data.frame <- data.frame(names, x, y)#
for (index.for.name in seq(along = letters)) {#
  this.name.data <- subset(names.data.frame, #
    subset = (names == letters[index.for.name]))#
  with(this.name.data, plot(x,y, #
  main = paste("Name =", letters[index.for.name])))#
  }
this.name.data
initial.variable.list <- letters  # character vector of variables as letter names#
#
set.diff(initial.variable.list, "q")  # will give 25 letters (q left out)
initial.variable.list <- letters  # character vector of variables as letter names#
#
setdiff(initial.variable.list, "q")  # will give 25 letters (q left out)
options()
library(e1071)
android_word_set <- c("Android")
mtpa_word_set <- c("Data", "scientists", "are", "methodological", "eclectics", "drawing", "from", "many", "scientific", "disciplines", "and", "translating", "the", "results", "of", "empirical", "research", "into", "words", "and", "pictures", "that", "management", "can", "understand")
google_word_set <- c("Browse", "fast", "with", "the", "Chrome", "web", "browser" "on", "your", "Android", "phone", "and", "tablet", "Sign", "in", "to", "sync", "your", "Chrome", "browser", "experience", "from", "your", "computer", "to", "bring", "it", "with", "you", "anywhere", "you", "go", "Search", "fast")
google_word_set <- c("Browse", "fast", "with", "the", "Chrome", "web", "browser", "on", "your", "Android", "phone", "and", "tablet", "Sign", "in", "to", "sync", "your", "Chrome", "browser", "experience", "from", "your", "computer", "to", "bring", "it", "with", "you", "anywhere", "you", "go", "Search", "fast")
to.lower(google_word_set)
tolower(google_word_set)
tolower(unique(google_word_set))
intersect(tolower(android_word_set), tolower(unique(google_word_set)))
if(length(intersect(tolower(android_word_set), tolower(unique(google_word_set)))) > 0) #
  cat("\nParagraph contains Android")#
  else cat("\nParagraph does not contain Android")
length(intersect(tolower(android_word_set), tolower(unique(google_word_set))))
if(length(intersect(tolower(android_word_set), tolower(unique(google_word_set)))) > 0) #
  cat("\nParagraph contains Android")
if(length(intersect(tolower(android_word_set), tolower(unique(google_word_set)))) > 0) #
  cat("\nParagraph contains Android")#
  else cat("\nParagraph does not contain Android")
if(length(intersect(tolower(android_word_set), tolower(unique(google_word_set)))) > 0) #
  {cat("\nParagraph contains Android")}#
  else {cat("\nParagraph does not contain Android")}
mtpa_word_set <- c("Data", "scientists", "are", "methodological", "eclectics", "drawing", "from", "many", "scientific", "disciplines", "and", "translating", "the", "results", "of", "empirical", "research", "into", "words", "and", "pictures", "that", "management", "can", "understand")
if(length(intersect(tolower(android_word_set), tolower(unique(mtpa_word_set)))) > 0) #
  cat("\nParagraph contains Android")
if(length(intersect(tolower(android_word_set), tolower(unique(google_word_set)))) == 0) #
  cat("\nParagraph contains Android")
mtpa_word_set <- c("Data", "scientists", "are", "methodological", "eclectics", "drawing", "from", "many", "scientific", "disciplines", "and", "translating", "the", "results", "of", "empirical", "research", "into", "words", "and", "pictures", "that", "management", "can", "understand")#
#
if(length(intersect(tolower(android_word_set), tolower(unique(mtpa_word_set)))) > 0) #
  cat("\nParagraph contains Android")#
#
if(length(intersect(tolower(android_word_set), tolower(unique(mtpa_word_set)))) == 0) #
  cat("\nParagraph does not contain Android")#
#
google_word_set <- c("Browse", "fast", "with", "the", "Chrome", "web", "browser", "on", "your", "Android", "phone", "and", "tablet", "Sign", "in", "to", "sync", "your", "Chrome", "browser", "experience", "from", "your", "computer", "to", "bring", "it", "with", "you", "anywhere", "you", "go", "Search", "fast")#
#
if(length(intersect(tolower(android_word_set), tolower(unique(google_word_set)))) > 0) #
  cat("\nParagraph contains Android")#
if(length(intersect(tolower(android_word_set), tolower(unique(google_word_set)))) == 0) #
  cat("\nParagraph does not contain Android")
Utilities for Spatial Data Analysis#
#
# user-defined function to convert degrees to radians#
# needed for lat.long.distance function#
degrees.to.radians <- function(x) { #
  (pi/180)*x#
  } # end degrees.to.radians function #
#
# user-defined function to convert distance between two points in miles#
# when the two points (a and b) are defined by longitude and latitude#
lat.long.distance <- function(longitude.a,latitude.a,longitude.b,latitude.b) {#
  radius.of.earth <- 24872/(2*pi)#
  c <- sin((degrees.to.radians(latitude.a) - #
    degrees.to.radians(latitude.b))/2)^2 + #
    cos(degrees.to.radians(latitude.a)) * #
    cos(degrees.to.radians(latitude.b)) * #
    sin((degrees.to.radians(longitude.a) -#
    degrees.to.radians(longitude.b))/2)^2#
  2 * radius.of.earth * (asin(sqrt(c)))#
  } # end lat.long.distance function#
# my home 1280 Boynton Street, Glendale, CA#
# latitude: 34.129708#
# longitude: -118.248318#
#
# Dodger Stadium ,#
# latitude: 34.072736#
# longitude: -118.240616#
#
lat.long.distance(-118.248318, 34.129708, -118.240616, 34.072736)
Restricting ourselves to colors that we can generate and display using a computer monitor, we can generate a rainbow of hues using a hue, luminance, and saturation function like this:#
#
library(colorspace)  # bring in the color functions#
#
color.set <- hex(HLS(seq(0, 360, length = 60)[-60], 0.5, 1))#
barplot(rep(1,length(color.set)), col = color.set, axes = FALSE)
cb.palette <- c("#999999","#E69F00","#56B4E9","#009E73","#F0E442","#0072B2","#D55E00","#CC79A7") #
barplot(rep(1,length(cb.palette)), col = cb.palette, axes = FALSE)#
title("Color-Blind-Friendly Palette")
x <- runif(200)
set.seed(999)
x <- runif(200)
y <- runif(200)
plot(x, y, xlab = "My Special Horizontal Axis Title", ylab = "My Response Title")
title("My Plot Title")
par(cex.axis = 2, mar = c(5,5,5,5))
set.seed(999)
x <- runif(200)
y <- runif(200)
plot(x, y, xlab = "My Special Horizontal Axis Title", ylab = "My Response Title")
title("My Plot Title")
library(MMST)
data(bodyfat)
http://cran.r-project.org/web/views/Graphics.html
https://jakevdp.github.io/blog/2013/03/23/matplotlib-and-the-future-of-visualization-in-python/
FNOL Model Specification Work#
#
library(randomForest)  # random forest algorithm for spec search#
#
input_data_set <- read.csv(file = "data_for_modeling.csv", stringsAsFactors = FALSE)#
#
# create year as continuous explanatory variable#
input_data_set$veh_year <- as.numeric(input_data_set$VEH_YEAR_CODE) #
#
# define factor variables#
input_data_set$VEH_MODEL_DESC <- factor(input_data_set$VEH_MODEL_DESC) #
input_data_set$FILE_AIRBAG_CODE <- factor(input_data_set$FILE_AIRBAG_CODE) #
input_data_set$VEH_YEAR_CODE <- factor(input_data_set$VEH_YEAR_CODE) #
input_data_set$VEH_TYPE_CODE <- factor(input_data_set$VEH_TYPE_CODE) #
input_data_set$COND_DRIVEABLE_CODE <- factor(input_data_set$COND_DRIVEABLE_CODE) #
input_data_set$odom_cluster <- factor(input_data_set$odom_cluster) #
input_data_set$sample <- factor(input_data_set$sample) #
#
# COND_PRIMARYIMPACT_CODE has many low-frequency codes, making it a problematic factor#
# recode as a factor with 13 initial codes 0 through 12 and one catch-all code 13#
input_data_set$COND_PRIMARYIMPACT_RECODE <- #
    ifelse((input_data_set$COND_PRIMARYIMPACT_CODE < 13), #
        input_data_set$COND_PRIMARYIMPACT_CODE, 13)#
input_data_set$COND_PRIMARYIMPACT_RECODE <- factor(input_data_set$COND_PRIMARYIMPACT_RECODE) #
# check the coding#
with(input_data_set, print(table(COND_PRIMARYIMPACT_CODE, COND_PRIMARYIMPACT_RECODE)))#
#
# COND_SECONDARYIMPACT_CODE has many low-frequency codes, making it a problematic factor#
# recode as a binary factor: secondary impact code present or not#
input_data_set$COND_SECONDARYIMPACT_RECODE <- #
    ifelse((input_data_set$COND_SECONDARYIMPACT_CODE == 0), 0, 1)#
input_data_set$COND_SECONDARYIMPACT_RECODE <- factor(input_data_set$COND_SECONDARYIMPACT_RECODE) #
# check the coding#
with(input_data_set, print(table(COND_SECONDARYIMPACT_CODE, COND_SECONDARYIMPACT_RECODE)))#
#
# approach here is to use ordinary least squares with a log-transformed response#
# rather than use generalized linear model with log link and gaussian family spec#
# results should be very close with lm() rather than glm()#
# and these will be obtained much faster... also easier to program in Java later#
input_data_set$response <- log(input_data_set$FILE_AMT)#
#
# fix problems with low frequency states by dropping VI, PR, and GU #
# and select a subset of states to speed up the process of looking #
# at alternative model specs... five selected states across regions of US#
selected_states <- c("CO","GA","IL","MA","WA")  # character strings currently#
working_data_set <- subset(input_data_set, #
    subset = (VEH_OWNERSTATE_CODE %in% selected_states)) #
# select a subset of clusters to reduce the sample size for spec search #
working_data_set <- subset(working_data_set, #
    subset = (cluster_f %in% 1:4))        #
working_data_set$VEH_OWNERSTATE_CODE <- factor(working_data_set$VEH_OWNERSTATE_CODE) #
working_data_set$cluster_f <- factor(working_data_set$cluster_f) #
# select a subset of higher frequency automobile makes#
selected_vehicle_makes <- c("ACUR","BUIC","CHEV","CHRY","DODG","FORD",#
     "GMC","HOND", "JEEP", "MAZD", "MERC", "MITS", "NISS", "OLDS", "PONT", "SATU", "SUBA", "TOYO")#
working_data_set <- subset(working_data_set, #
    subset = (VEH_MAKE_CODE %in% selected_vehicle_makes)) #
working_data_set$VEH_MAKE_CODE <- factor(working_data_set$VEH_MAKE_CODE) #
print(str(working_data_set))#
with(working_data_set, print(table(VEH_OWNERSTATE_CODE, cluster_f, useNA = "always")))#
#
# -----------------------------------------#
# SIMPLE NAMES FOR INTERACTION DEFINITIONS  #
# -----------------------------------------#
# nine variables implies 9*8/2 = 36 two-factor interactions#
working_data_set$A <- working_data_set$VEHICLE_ODOMETER#
working_data_set$B <- working_data_set$veh_year#
working_data_set$C <- working_data_set$FILE_AIRBAG_CODE#
working_data_set$D <- working_data_set$VEH_OWNERSTATE_CODE#
working_data_set$E <- working_data_set$VEH_MAKE_CODE#
working_data_set$F <- working_data_set$VEH_TYPE_CODE#
working_data_set$G <- working_data_set$COND_PRIMARYIMPACT_RECODE#
working_data_set$H <- working_data_set$COND_SECONDARYIMPACT_RECODE#
working_data_set$I <- working_data_set$cluster_f#
#
working_data_set$AB <- interaction(working_data_set$A, working_data_set$B) #
working_data_set$AC <- interaction(working_data_set$A, working_data_set$C)#
working_data_set$AD <- interaction(working_data_set$A, working_data_set$D)#
working_data_set$AE <- interaction(working_data_set$A, working_data_set$E)#
working_data_set$AF <- interaction(working_data_set$A, working_data_set$F)#
working_data_set$AG <- interaction(working_data_set$A, working_data_set$G)#
working_data_set$AH <- interaction(working_data_set$A, working_data_set$H)#
working_data_set$AI <- interaction(working_data_set$A, working_data_set$I)#
#
working_data_set$BC <- interaction(working_data_set$B, working_data_set$C)#
working_data_set$BD <- interaction(working_data_set$B, working_data_set$D)#
working_data_set$BE <- interaction(working_data_set$B, working_data_set$E)#
working_data_set$BF <- interaction(working_data_set$B, working_data_set$F)#
working_data_set$BG <- interaction(working_data_set$B, working_data_set$G)#
working_data_set$BH <- interaction(working_data_set$B, working_data_set$H)#
working_data_set$BI <- interaction(working_data_set$B, working_data_set$I)#
#
working_data_set$CD <- interaction(working_data_set$C, working_data_set$D)#
working_data_set$CE <- interaction(working_data_set$C, working_data_set$E)#
working_data_set$CF <- interaction(working_data_set$C, working_data_set$F)#
working_data_set$CG <- interaction(working_data_set$C, working_data_set$G)#
working_data_set$CH <- interaction(working_data_set$C, working_data_set$H)#
working_data_set$CI <- interaction(working_data_set$C, working_data_set$I)#
#
working_data_set$DE <- interaction(working_data_set$D, working_data_set$E)#
working_data_set$DF <- interaction(working_data_set$D, working_data_set$F)#
working_data_set$DG <- interaction(working_data_set$D, working_data_set$G)#
working_data_set$DH <- interaction(working_data_set$D, working_data_set$H)#
working_data_set$DI <- interaction(working_data_set$D, working_data_set$I)#
#
working_data_set$EF <- interaction(working_data_set$E, working_data_set$F)#
working_data_set$EG <- interaction(working_data_set$E, working_data_set$G)#
working_data_set$EH <- interaction(working_data_set$E, working_data_set$H)#
working_data_set$EI <- interaction(working_data_set$E, working_data_set$I)#
#
working_data_set$FG <- interaction(working_data_set$F, working_data_set$G)#
working_data_set$FH <- interaction(working_data_set$F, working_data_set$H)#
working_data_set$FI <- interaction(working_data_set$F, working_data_set$I)#
#
working_data_set$GH <- interaction(working_data_set$G, working_data_set$H)#
working_data_set$GI <- interaction(working_data_set$G, working_data_set$I)#
#
working_data_set$HI <- interaction(working_data_set$H, working_data_set$I)#
# -----------------------------------------#
# DATA SUBSETS FOR TRAINING AND VALIDATION  #
# -----------------------------------------#
drivable_set <- subset(working_data_set, subset = (COND_DRIVEABLE_CODE == "Y"))#
nondrivable_set <- subset(working_data_set, subset = (COND_DRIVEABLE_CODE == "N"))#
#
drivable_training_set <- subset(drivable_set, subset = (sample == "D")) #
drivable_validation_set <- subset(drivable_set, subset = (sample == "V")) #
#
nondrivable_training_set <- subset(nondrivable_set, subset = (sample == "D")) #
nondrivable_validation_set <- subset(nondrivable_set, subset = (sample == "V")) #
#
# ensure that there are sufficient observations for spec search#
with(drivable_training_set, print(table(VEH_OWNERSTATE_CODE, cluster_f, useNA = "always")))#
with(drivable_validation_set, print(table(VEH_OWNERSTATE_CODE, cluster_f, useNA = "always")))#
with(nondrivable_training_set, print(table(VEH_OWNERSTATE_CODE, cluster_f, useNA = "always")))#
with(nondrivable_validation_set, print(table(VEH_OWNERSTATE_CODE, cluster_f, useNA = "always")))#
#
# -----------------------------------------#
# INITIAL ALTERNATIVE MODELS  #
# -----------------------------------------#
# base model from previous work using SAS#
base_model_spec <- {response ~ FILE_AIRBAG_CODE +#
VEH_OWNERSTATE_CODE +#
VEH_YEAR_CODE +#
VEH_MAKE_CODE +#
VEH_TYPE_CODE +#
COND_PRIMARYIMPACT_RECODE +#
COND_SECONDARYIMPACT_RECODE +#
odom_cluster +#
cluster_f +#
VEH_OWNERSTATE_CODE * FILE_AIRBAG_CODE +#
VEH_YEAR_CODE * FILE_AIRBAG_CODE +#
odom_cluster * FILE_AIRBAG_CODE +#
VEH_TYPE_CODE * FILE_AIRBAG_CODE +#
VEH_MAKE_CODE * VEH_TYPE_CODE +#
VEH_MAKE_CODE * FILE_AIRBAG_CODE +#
COND_PRIMARYIMPACT_RECODE * FILE_AIRBAG_CODE +#
COND_PRIMARYIMPACT_RECODE * COND_SECONDARYIMPACT_RECODE +#
cluster_f * FILE_AIRBAG_CODE} #
#
additive_model_spec <- {response ~ FILE_AIRBAG_CODE +#
VEH_OWNERSTATE_CODE +#
VEH_YEAR_CODE +#
VEH_MAKE_CODE +#
VEH_TYPE_CODE +#
COND_PRIMARYIMPACT_RECODE +#
COND_SECONDARYIMPACT_RECODE +#
odom_cluster +#
cluster_f} #
#
# not clear what is gained by making mileage a factor variable#
additive_model_odometer_spec <- {response ~ FILE_AIRBAG_CODE +#
VEH_OWNERSTATE_CODE +#
VEH_YEAR_CODE +#
VEH_MAKE_CODE +#
VEH_TYPE_CODE +#
COND_PRIMARYIMPACT_RECODE +#
COND_SECONDARYIMPACT_RECODE +#
VEHICLE_ODOMETER +#
cluster_f} #
#
# not clear what is gained by making mileage a factor variable#
additive_model_odometer_spec <- {response ~ FILE_AIRBAG_CODE +#
VEH_OWNERSTATE_CODE +#
VEH_YEAR_CODE +#
VEH_MAKE_CODE +#
VEH_TYPE_CODE +#
COND_PRIMARYIMPACT_RECODE +#
COND_SECONDARYIMPACT_RECODE +#
VEHICLE_ODOMETER +#
cluster_f} #
#
# also not clear what is gained by making vehicle year a factor variable#
additive_model_odometer_year_spec <- {response ~ FILE_AIRBAG_CODE +#
VEH_OWNERSTATE_CODE +#
VEH_MAKE_CODE +#
VEH_TYPE_CODE +#
COND_PRIMARYIMPACT_RECODE +#
COND_SECONDARYIMPACT_RECODE +#
VEHICLE_ODOMETER +#
veh_year +#
cluster_f} #
#
# -----------------------------------------#
# SPEC SEARCH USING SIMPLE VARIABLE NAMES  #
# -----------------------------------------#
model_search_spec_check <- {response ~ A + B + C + D + E + F + G + H + I +#
    A*B + A*C + A*D + A*E + A*F + A*G + A*H + A*I +#
          B*C + B*D + B*E + B*F + B*G + B*H + B*I +#
                C*D + C*E + C*F + C*G + C*H + C*I +      #
                      D*E + D*F + D*G + D*H + D*I +  #
                            E*F + E*G + E*H + E*I +  #
                                  F*G + F*H + F*I + #
                                        G*H + G*I +#
                                              H*I}#
model_search_spec <- {response ~ A + B + C + D + E + F + G + H + I +#
    AB + AC + AD + AE + AF + AG + AH + AI +#
          BC + BD + BE + BF + BG + BH + BI +#
                CD + CE + CF + CG + CH + CI +      #
                      DE + DF + DG + DH + DI +  #
                            EF + EG + EH + EI +  #
                                  FG + FH + FI + #
                                       GH + GI +#
                                              HI}#
selected_model_spec <- base_model_spec#
selected_model_spec <- additive_model_spec#
selected_model_spec <- additive_model_odometer_spec#
selected_model_spec <- additive_model_odometer_year_spec#
selected_model_spec <- model_search_spec_check#
selected_model_spec <- model_search_spec
library(ggplot2) #
#
original.facebook.data.frame <- read.csv(file = "Omnibus_Dec_2012_csv.csv")#
#
# define factor variable for facebook user#
original.facebook.data.frame$facebook_user <- ifelse((original.facebook.data.frame$pial2 == 1),2,1)#
original.facebook.data.frame$facebook_user <- factor(original.facebook.data.frame$facebook_user,#
  levels = c(1,2), labels = c("Non-User","User"))#
#
# define new data fame for work#
working.data.frame <- original.facebook.data.frame#
#
# define Internet user data frame#
internet.user.data.frame <- subset(working.data.frame, subset = (intuse == 1))#
#
x <- mosaic( ~facebook_user + employ, data = internet.user.data.frame,#
#
  labeling_args = list(set_varnames = c(employ = "Level of Employment", facebook_user = "Facebook Usage")),#
#
  highlighting = "facebook_user",#
#
  highlighting_fill = c("cornsilk","violet"),#
#
  rot_labels = c(left = 0, top = 0),#
#
  pos_labels = c("center","center"),#
#
  offset_labels = c(0.0,0.6))#
#
y <- mosaic( ~facebook_user + sex, data = internet.user.data.frame,#
  labeling_args = list(set_varnames = c(sex = "", facebook_user = "Facebook Usage")),#
  highlighting = "facebook_user",#
  highlighting_fill = c("cornsilk","violet"),#
  rot_labels = c(left = 0, top = 0),#
  pos_labels = c("center","center"),#
  offset_labels = c(0.0,0.6))#
z <- mosaic( ~facebook_user + par, data = internet.user.data.frame,#
  labeling_args = list(set_varnames = c(par = "Parent", facebook_user = "Facebook Usage")),#
  highlighting = "facebook_user",#
  highlighting_fill = c("cornsilk","violet"),#
  rot_labels = c(left = 0, top = 0),#
  pos_labels = c("center","center"),#
  offset_labels = c(0.0,0.6))#
a <- mosaic( ~facebook_user + educ2, data = internet.user.data.frame,#
  labeling_args = list(set_varnames = c(educ2 = "Educational Level", facebook_user = "Facebook Usage")),#
  highlighting = "facebook_user",#
  highlighting_fill = c("cornsilk","violet"),#
  rot_labels = c(left = 0, top = 0),#
  pos_labels = c("center","center"),#
  offset_labels = c(0.0,0.6))#
 b <- mosaic( ~facebook_user + hisp, data = internet.user.data.frame,#
  labeling_args = list(set_varnames = c(hisp = "Hispanic", facebook_user = "Facebook Usage")),#
  highlighting = "facebook_user",#
  highlighting_fill = c("cornsilk","violet"),#
  rot_labels = c(left = 0, top = 0),#
  pos_labels = c("center","center"),#
  offset_labels = c(0.0,0.6))#
 c <- mosaic( ~facebook_user + race, data = internet.user.data.frame,#
  labeling_args = list(set_varnames = c(race = "Race", facebook_user = "Facebook Usage")),#
  highlighting = "facebook_user",#
  highlighting_fill = c("cornsilk","violet"),#
  rot_labels = c(left = 0, top = 0),#
  pos_labels = c("center","center"),#
  offset_labels = c(0.0,0.6))#
 d <- mosaic( ~facebook_user + inc, data = internet.user.data.frame,#
  labeling_args = list(set_varnames = c(inc = "Income", facebook_user = "Facebook Usage")),#
  highlighting = "facebook_user",#
  highlighting_fill = c("cornsilk","violet"),#
  rot_labels = c(left = 0, top = 0),#
  pos_labels = c("center","center"),#
  offset_labels = c(0.0,0.6))
library(vcd)#
library(ggplot2) #
#
original.facebook.data.frame <- read.csv(file = "Omnibus_Dec_2012_csv.csv")#
#
# define factor variable for facebook user#
original.facebook.data.frame$facebook_user <- ifelse((original.facebook.data.frame$pial2 == 1),2,1)#
original.facebook.data.frame$facebook_user <- factor(original.facebook.data.frame$facebook_user,#
  levels = c(1,2), labels = c("Non-User","User"))#
#
# define new data fame for work#
working.data.frame <- original.facebook.data.frame#
#
# define Internet user data frame#
internet.user.data.frame <- subset(working.data.frame, subset = (intuse == 1))#
#
x <- mosaic( ~facebook_user + employ, data = internet.user.data.frame,#
#
  labeling_args = list(set_varnames = c(employ = "Level of Employment", facebook_user = "Facebook Usage")),#
#
  highlighting = "facebook_user",#
#
  highlighting_fill = c("cornsilk","violet"),#
#
  rot_labels = c(left = 0, top = 0),#
#
  pos_labels = c("center","center"),#
#
  offset_labels = c(0.0,0.6))#
#
y <- mosaic( ~facebook_user + sex, data = internet.user.data.frame,#
  labeling_args = list(set_varnames = c(sex = "", facebook_user = "Facebook Usage")),#
  highlighting = "facebook_user",#
  highlighting_fill = c("cornsilk","violet"),#
  rot_labels = c(left = 0, top = 0),#
  pos_labels = c("center","center"),#
  offset_labels = c(0.0,0.6))#
z <- mosaic( ~facebook_user + par, data = internet.user.data.frame,#
  labeling_args = list(set_varnames = c(par = "Parent", facebook_user = "Facebook Usage")),#
  highlighting = "facebook_user",#
  highlighting_fill = c("cornsilk","violet"),#
  rot_labels = c(left = 0, top = 0),#
  pos_labels = c("center","center"),#
  offset_labels = c(0.0,0.6))#
a <- mosaic( ~facebook_user + educ2, data = internet.user.data.frame,#
  labeling_args = list(set_varnames = c(educ2 = "Educational Level", facebook_user = "Facebook Usage")),#
  highlighting = "facebook_user",#
  highlighting_fill = c("cornsilk","violet"),#
  rot_labels = c(left = 0, top = 0),#
  pos_labels = c("center","center"),#
  offset_labels = c(0.0,0.6))#
 b <- mosaic( ~facebook_user + hisp, data = internet.user.data.frame,#
  labeling_args = list(set_varnames = c(hisp = "Hispanic", facebook_user = "Facebook Usage")),#
  highlighting = "facebook_user",#
  highlighting_fill = c("cornsilk","violet"),#
  rot_labels = c(left = 0, top = 0),#
  pos_labels = c("center","center"),#
  offset_labels = c(0.0,0.6))#
 c <- mosaic( ~facebook_user + race, data = internet.user.data.frame,#
  labeling_args = list(set_varnames = c(race = "Race", facebook_user = "Facebook Usage")),#
  highlighting = "facebook_user",#
  highlighting_fill = c("cornsilk","violet"),#
  rot_labels = c(left = 0, top = 0),#
  pos_labels = c("center","center"),#
  offset_labels = c(0.0,0.6))#
 d <- mosaic( ~facebook_user + inc, data = internet.user.data.frame,#
  labeling_args = list(set_varnames = c(inc = "Income", facebook_user = "Facebook Usage")),#
  highlighting = "facebook_user",#
  highlighting_fill = c("cornsilk","violet"),#
  rot_labels = c(left = 0, top = 0),#
  pos_labels = c("center","center"),#
  offset_labels = c(0.0,0.6))
x <- c(1, 2, 3, 4)
type(x)
class(x)
y <- factor(x)
class(y)
z <- numeric(y)
z <- as.numeric(y)
class(z)
from_node <- c(1, 2, 3, 4, 5)#
to_node <- c(2, 3, 5, 6, 7)#
edgelist <- data.frame(from_node, to_node)
print(edgelist)
select_nodes <- c(1, 2, 5)#
#
sample_edgelist <- subset(edgelist, #
    subset = (from_node %in% select_nodes))#
sample_edgelist <- subset(sample_edgelist,#
    subset = (to_node %in% select_nodes))#
print(sample_edgelist)
Suppose I have an edgelist given as follows:#
#
from_node <- c(1, 2, 3, 4, 5)#
to_node <- c(2, 3, 5, 6, 7)#
edgelist <- data.frame(from_node, to_node)#
#
print(edgelist)#
#
# Now let's sample just nodes 1, 3, and 5.#
#
select_nodes <- c(1, 2, 5)#
#
sample_edgelist <- subset(edgelist, #
    subset = (from_node %in% select_nodes))
sample_edgelist
Suppose I have an edgelist given as follows:#
#
from_node <- c(1, 2, 3, 4, 5)#
to_node <- c(2, 3, 5, 6, 7)#
edgelist <- data.frame(from_node, to_node)#
#
print(edgelist)#
#
# Now let's sample just nodes 1, 3, and 5.#
#
select_nodes <- c(1, 3, 5)#
#
sample_edgelist <- subset(edgelist, #
    subset = (from_node %in% select_nodes))#
sample_edgelist <- subset(sample_edgelist,#
    subset = (to_node %in% select_nodes))#
print(sample_edgelist)
Suppose I have an edgelist given as follows:#
#
from_node <- c(1, 2, 3, 4, 5, 5)#
to_node <- c(2, 3, 5, 6, 7, 1)#
edgelist <- data.frame(from_node, to_node)#
#
print(edgelist)#
#
# Now let's sample just nodes 1, 3, and 5.#
#
select_nodes <- c(1, 3, 5)#
#
sample_edgelist <- subset(edgelist, #
    subset = (from_node %in% select_nodes))#
sample_edgelist <- subset(sample_edgelist,#
    subset = (to_node %in% select_nodes))#
print(sample_edgelist)  #
#
# note that the resulting list contains edges#
# that have both from- and to-nodes in the#
# select_nodes list
exp(0.001)
exp(0.001)/(1+exp(0.001))
x = 10
xmin = 3
x - xmin
pi1 = matrix(c(0.7,0.2,0.2,0.7),2,2)#
mu.vec = c(1,5)
c.vec = as.vector((diag(2)-pi1)%*%mu.vec)
c.vec
cov.mat = matrix(c(1,0.5,0.5,1),2,2)
cov.mat
var1.mod = list(const=c.vec,ar=pi1,Sigma=cov.mat)
var1.mod
set.seed(301)
y.var = simulate(var(var1.mod,n=250,
y.var = simulate(var(var1.mod,n=250))
Lio Assignment 2 Supplement Final#
# Read in data#
CPIAUCNS <- read.table(file.choose(), header=TRUE, sep=",")#
# Load Libraries#
library(quantmod) # use for gathering and charting economic data#
library(lubridate) # date functions#
library(latticeExtra) # package used for horizon plot#
library(zoo)  # utilities for working with time series#
# Read in Data from Non-durable and Durable goods#
PCEND <- read.table(file.choose(), header=TRUE, sep=",")#
PCEDG <- read.table(file.choose(), header=TRUE, sep=",")#
# confirm the data is on the right track#
head(PCEDG, )#
head(PCEND, )#
# Plot it for Durable Goods#
qplot(PCEDG$DATE, PCEDG$VALUE)#
qplot(PCEND$DATE, PCEND$VALUE)#
# I cannot seem to get data directly from the web but I will eventually#
# Just doing what I can with qplot for now#
#PCE Durable Goods#
qplot(PCEDG$DATE, PCEDG$VALUE)#
#PCE Non-durable Goods#
qplot(PCEND$DATE, PCEND$VALUE)#
# Tried to scrape Costco (COST) data from Yahoo but was unsuccessful
install.packages("Sxslt", repos = "http://www.omegahat.org/R", type = "source")
library(Hmisc)
email <- c("person_a@gmail.com",#
"person_b@gmail.com",#
"person_c@gmail.com",#
"person_d@gmail.com",#
"person_e@gmail.com",#
"person_f@gmail.com")#
id <- 1:6#
the_data <- data.frame(id, email)
the_data
find_id <- function(the_data, this_email) {#
    the_data[(the_data$email == this_email),"id"]#
find_email <- function(the_data, this_id) {#
    the_data[(the_data$id == this_id),"email"]
find_id <- function(the_data, this_email) {#
    the_data[(the_data$email == this_email),"id"]#
    }#
find_email <- function(the_data, this_id) {#
    the_data[(the_data$id == this_id),"email"] #
    }#
# example of finding the email from an id#
try_id <- 5#
print(find_email(the_data, try_id))
cat(find_email(the_data, try_id))
email <- c("person_a@gmail.com",#
"person_b@gmail.com",#
"person_c@gmail.com",#
"person_d@gmail.com",#
"person_e@gmail.com",#
"person_f@gmail.com")#
id <- 1:6#
the_data <- data.frame(id, email)#
the_data$email <- as.character(the_data$email)#
#
find_id <- function(the_data, this_email) {#
    the_data[(the_data$email == this_email),"id"]#
    }#
find_email <- function(the_data, this_id) {#
    the_data[(the_data$id == this_id),"email"] #
    }
# example of finding the email from an id#
try_id <- 5#
cat(find_email(the_data, try_id))
# example of finding the id from an email#
try_email <- "person_c@gmail.com"#
cat(find_id(the_data, try_email))
library(support.CEs)
football_survey = Lma.design(attribute.names = #
+ list(seating = c("Upper", "Lower", "Mid" ,"Luxury"),#
+timeofyear=c("BeforeThanksgiving","AfterThanksgiving"),Record=c("Above500","Below500"),#
+Location=c("North","South","East","West"),TeamPlay=c("Indivision","Outdivision"),Price=c("$60","$80","$100","$120","$140","$160")),nalternatives = 1, nblocks = 1, seed = 7777)
football_survey = Lma.design(attribute.names = #
list(seating = c("Upper", "Lower", "Mid" ,"Luxury"),#
timeofyear=c("BeforeThanksgiving","AfterThanksgiving"),Record=c("Above500","Below500"),#
Location=c("North","South","East","West"),TeamPlay=c("Indivision","Outdivision"),Price=c("$60","$80","$100","$120","$140","$160")),nalternatives = 1, nblocks = 1, seed = 7777)
football_survey
library(gmp)
factorialZ(3)
chooseZ(3, 2)
chooseZ(5, 2)
chooseZ(50, 2)
chooseZ(50, 15)
chooseZ(1000, 15)
chooseZ(1000, 25)
x <- c(1,2,3,4,5,6)
y <- c(1,2,3,4,5,6)
library(coop)
cosim(x,y)
cosine(x, y)
y <- rev(Y)
y <- rev(y)
y
cosine(x,y)
y <- c(1,2,4,5,20)
cosine(x,y)
y <- c(1,2,4,5,20,90)
cosine(x,y)
y <- c(1,2,4,5,20,6)
cosine(x,y)
y <- c(1,2,3,5,20,6)
cosine(x,y)
y <- c(1,2,3,4,20,6)
cosine(x,y)
y <- c(1,2,3,4,5,6)
cosine(x,y)
y <- c(1,2,3,4,5,6000)
cosine(x,y)
y <- c(1,2,3,4,5,600)
cosine(x,y)
y <- c(1,2,3,4,5,60)
cosine(x,y)
y <- c(1,2,3,4,50,60)
cosine(x,y)
x
y
y <- c(6,5,4,3,2,1)
cor(x,y)
cosine(x,y)
z <- c(2,2,2,2,2,2)
cosine(x,z)
cor(x,z)
# matrix multiplication in R#
#
A <- matrix(c(1, 2, 3, 11, 12, 13), #
         nrow = 2, ncol = 3,   #
         byrow = TRUE)#
print(A)#
#
B <- matrix(c(7, 8, 9, 4, 5, 6), #
         nrow = 2, ncol = 3,   #
         byrow = TRUE)    #
print(B)#
#
# element-by-element multiplication#
C <- A * B#
print(C)#
#
# matrix multiplication only possible for conformable matrices#
# so transpose B first#
AB <- A %*% t(B)#
print(AB)
library(cluster)
initial_survey_input <- #
    read.csv(file = "survey_data_input.csv", stringsAsFactors = FALSE)
initial_survey_input <- #
    read.csv(file = "mspa_survey_data.csv", stringsAsFactors = FALSE)
names(initial_survey_input)
table(initial_survey_input$IPAddress)
initial_survey_input <- #
    read.csv(file = "mspa_survey_data.csv", stringsAsFactors = FALSE)
length(unique(initial_survey_input[1,]))
names(initial_survey_input)
length(unique(initial_survey_input$RespondentID))
# external libraries for visualizations and data manipulation#
# ensure that these have been installed prior to calls#
library(lattice) #
library(ggplot2)#
library(grid)#
#
# set up hash fuctions similar to Python dictionary data structure#
library(hash)
# user-defined functions useful for data visualization#
source("code_correlation_heat_map_utility_plus_full_range.R")#
source("code_split_plotting_utilities.R")#
source("code_pretty_bar_chart.R")
# user-defined functions useful for data visualization#
source("code_correlation_heat_map.R")#
source("code_split_plotting_utilities.R")#
source("code_pretty_bar_chart.R")
# set color constants for visualizations#
HEX_BLUE <- "#3953A4"  #
HEX_GREEN <- "#13A049" #
HEX_RED <- "#EE3166"  #
HEX_WHITE <- "#FFFFFF"  #
HEX_GREY <- "#C2C2D6"  #
HEX_BLACK <- "#000000"
# read in comma-delimited text file#
# note that IPAddress is formatted as an actual IP address#
# but is actually a random-hash of the original IP address#
valid_survey_input <- #
    read.csv(file = "mspa_survey_data.csv", #
    stringsAsFactors = FALSE)
cat("\nNumber of Respondents =", nrow(valid_survey_input))
cormat <- cor(valid_survey_input[, 4:16])#
short_var_names <- c("My_Java", "My_JavaSript", "My_Python", "My_R", "My_SAS",#
    "Prof_Java", "Prof_JavaSript", "Prof_Python", "Prof_R", "Prof_SAS",#
    "Ind_Java", "Ind_JavaSript", "Ind_Python", "Ind_R", "Ind_SAS")#
rownames(cormat) <- short_var_names#
colnames(cormat) <- short_var_names
cormat <- cor(valid_survey_input[, 2:16])#
short_var_names <- c("My_Java", "My_JavaSript", "My_Python", "My_R", "My_SAS",#
    "Prof_Java", "Prof_JavaSript", "Prof_Python", "Prof_R", "Prof_SAS",#
    "Ind_Java", "Ind_JavaSript", "Ind_Python", "Ind_R", "Ind_SAS")#
rownames(cormat) <- short_var_names#
colnames(cormat) <- short_var_names
# examine intercorrelations among software preference variables#
pdf(file = "fig_cor_heat_map_language_prefernces_complete.pdf", #
    width = 7.5, height = 7.5, paper = "letter")#
correlation_heat_map(cormat, order_variable = NULL, #
   title = "Correlations for Original Computer Language Items")#
dev.off()
# define new variables for working data frame#
# for one individual at a time#
Java <- JavaScript <- Python <- R <- SAS <- numeric(nrow(valid_survey_input))#
#
for (i in seq(along = valid_survey_input$Personal_JavaScalaSpark)) {#
Java[i] <- mean(valid_survey_input$Personal_JavaScalaSpark[i],#
        valid_survey_input$Professional_JavaScalaSpark[i], valid_survey_input$Industry_JavaScalaSpark[i])#
JavaScript[i] <- mean(valid_survey_input$Personal_JavaScriptHTMLCSS[i],#
        valid_survey_input$Professional_JavaScriptHTMLCSS[i], valid_survey_input$Industry_JavaScriptHTMLCSS[i])   #
Python[i] <- mean(valid_survey_input$Personal_Python[i],#
        valid_survey_input$Professional_Python[i], valid_survey_input$Industry_Python[i])     #
R[i] <- mean(valid_survey_input$Personal_R[i],#
        valid_survey_input$Professional_R[i], valid_survey_input$Industry_R[i])     #
SAS[i] <- mean(valid_survey_input$Personal_SAS[i],#
        valid_survey_input$Professional_SAS[i], valid_survey_input$Industry_SAS[i])  #
} # end of for-loop for creating preference variables
# create new data frame with the summary language variables    #
working_survey_input <- data.frame(Java, JavaScript, Python, R, SAS)
# let nonresponse on sliders be zero interest#
# and create interest variables for use in the new data frame#
working_survey_input$Python_Course_Interest <- #
    ifelse(is.na(valid_survey_input$Python_Course_Interest), 0,#
        valid_survey_input$Python_Course_Interest) #
working_survey_input$Foundations_DE_Course_Interest <- #
    ifelse(is.na(valid_survey_input$Foundations_DE_Course_Interest), 0,#
        valid_survey_input$Foundations_DE_Course_Interest) #
working_survey_input$Analytics_App_Course_Interest <- #
    ifelse(is.na(valid_survey_input$Analytics_App_Course_Interest), 0,#
        valid_survey_input$Analytics_App_Course_Interest)         #
working_survey_input$Systems_Analysis_Course_Interest <- #
    ifelse(is.na(valid_survey_input$Systems_Analysis_Course_Interest), 0,#
        valid_survey_input$Systems_Analysis_Course_Interest)
# use R standard graphics to make a scatter plot #
pdf(file = "fig_plot_simple_scatter_plot.pdf", #
    width = 7.5, height = 7.5, paper = "letter")#
with(working_survey_input, #
    plot(Systems_Analysis_Course_Interest, Courses_Completed,#
        las = 1,#
        xlab = "Number of Coures Completed",#
        ylab = "Interest in Data Science Systems Analysis Course")#
dev.off()
pdf(file = "fig_plot_simple_scatter_plot.pdf", #
    width = 7.5, height = 7.5, paper = "letter")#
with(working_survey_input, #
    plot(Systems_Analysis_Course_Interest, Courses_Completed,#
        las = 1,#
        xlab = "Number of Coures Completed",#
        ylab = "Interest in Data Science Systems Analysis Course"))#
dev.off()
working_survey_input$Courses_Completed <- #
    valid_survey_input$Courses_Completed
# use R standard graphics to make a scatter plot #
pdf(file = "fig_plot_simple_scatter_plot.pdf", #
    width = 7.5, height = 7.5, paper = "letter")#
with(working_survey_input, #
    plot(Systems_Analysis_Course_Interest, Courses_Completed,#
        las = 1,#
        xlab = "Number of Coures Completed",#
        ylab = "Interest in Data Science Systems Analysis Course"))#
dev.off()
pdf(file = "fig_plot_simple_scatter_plot.pdf", #
    width = 7.5, height = 7.5, paper = "letter")#
with(working_survey_input, #
    plot(Courses_Completed, Systems_Analysis_Course_Interest, #
        las = 1,#
        xlab = "Number of Coures Completed",#
        ylab = "Interest in Data Science Systems Analysis Course"))#
dev.off()
# software count variables to add to the data frame#
working_survey_input$Python_Courses <- numeric(nrow(working_survey_input))#
working_survey_input$R_Courses <- numeric(nrow(working_survey_input))#
working_survey_input$SAS_Courses <- numeric(nrow(working_survey_input))#
for (istudent in seq(along = working_survey_input$Python_Courses)) {#
#
    if (valid_survey_input$PREDICT400[istudent] != "")#
        working_survey_input$Python_Courses[istudent] <-#
            working_survey_input$Python_Courses[istudent] + 1#
    if (valid_survey_input$PREDICT420[istudent] != "")#
        working_survey_input$Python_Courses[istudent] <-#
            working_survey_input$Python_Courses[istudent] + 1#
    if (valid_survey_input$PREDICT452[istudent] != "")#
        working_survey_input$Python_Courses[istudent] <-#
            working_survey_input$Python_Courses[istudent] + 1#
    if (valid_survey_input$PREDICT453[istudent] != "")#
        working_survey_input$Python_Courses[istudent] <-#
            working_survey_input$Python_Courses[istudent] + 1#
    if (valid_survey_input$PREDICT401[istudent] != "")#
        working_survey_input$R_Courses[istudent] <-#
            working_survey_input$R_Courses[istudent] + 1#
    if (valid_survey_input$PREDICT413[istudent] != "")#
        working_survey_input$R_Courses[istudent] <-#
            working_survey_input$R_Courses[istudent] + 1#
    if (valid_survey_input$PREDICT450[istudent] != "")#
        working_survey_input$R_Courses[istudent] <-#
            working_survey_input$R_Courses[istudent] + 1        #
    if (valid_survey_input$PREDICT451[istudent] != "")#
        working_survey_input$R_Courses[istudent] <-#
            working_survey_input$R_Courses[istudent] + 1        #
    if (valid_survey_input$PREDICT454[istudent] != "")#
        working_survey_input$R_Courses[istudent] <-#
            working_survey_input$R_Courses[istudent] + 1        #
    if (valid_survey_input$PREDICT455[istudent] != "")#
        working_survey_input$R_Courses[istudent] <-#
            working_survey_input$R_Courses[istudent] + 1        #
    if (valid_survey_input$PREDICT456[istudent] != "")#
        working_survey_input$R_Courses[istudent] <-#
            working_survey_input$R_Courses[istudent] + 1        #
    if (valid_survey_input$PREDICT457[istudent] != "")#
        working_survey_input$R_Courses[istudent] <-#
            working_survey_input$R_Courses[istudent] + 1 #
#
    if (valid_survey_input$PREDICT410[istudent] != "")#
        working_survey_input$SAS_Courses[istudent] <-#
            working_survey_input$SAS_Courses[istudent] + 1#
    if (valid_survey_input$PREDICT411[istudent] != "")#
        working_survey_input$SAS_Courses[istudent] <-#
            working_survey_input$SAS_Courses[istudent] + 1#
#
    }
# work with user-defined function to make bar chart#
# make pretty bar chart for number of SAS courses taken#
pdf(file = "fig_bar_chart_for_number_sas_courses.pdf", #
    width = 7.5, height = 7.5, paper = "letter")  #
pretty_bar_chart(plotting_frame = working_survey_input,#
    plotting_variable = "SAS_Courses",#
    set_xlab = "\nNumber of SAS Courses Taken",#
    set_ylab = "Number of Students",#
    set_title = "Bar Chart for Number of SAS Courses Taken")#
dev.off()
# work with user-defined function to make bar chart#
# make pretty ggplot2 bar chart for number of SAS courses taken#
pdf(file = "fig_bar_chart_for_number_sas_courses.pdf", #
    width = 7.5, height = 7.5, paper = "letter")  #
ggplot_object <- ggplot(data = working_survey_input,#
    aes(x = SAS_Courses)) +#
geom_bar(fill = set_bar_color, colour = set_bar_color) +#
ggtitle("Bar Chart for Number of SAS Courses Taken") +#
xlab("\nNumber of SAS Courses Taken") +#
ylab("Number of Students") #
print(ggplot_object)#
dev.off()
pdf(file = "fig_bar_chart_for_number_sas_courses.pdf", #
    width = 7.5, height = 7.5, paper = "letter")  #
ggplot_object <- ggplot(data = working_survey_input,#
    aes(x = SAS_Courses)) +#
geom_bar(fill = HEX_BLUE, colour = HEX_BLUE) +#
ggtitle("Bar Chart for Number of SAS Courses Taken") +#
xlab("\nNumber of SAS Courses Taken") +#
ylab("Number of Students") #
print(ggplot_object)#
dev.off()
# hash table for computing terms to graduate from graduation dates#
# works like an Excel lookup table, Perl hash, or Python dictionary#
mykeys <- c("Fall 2016", "Winter 2017", "Spring 2017", "Summer 2017",#
    "Fall 2017", "Winter 2018", "Spring 2018", "Summer 2018", "Fall 2018",#
    "Winter 2019", "Spring 2019", "Summer 2019", "Fall 2019",  "Winter 2017",#
    "2020 or Later")#
myvalues <- 0:(length(mykeys) - 1)#
# create the hash table object (similar to dictionary in python)#
mydate_dict <- hash(keys = mykeys, values = myvalues)#
#
working_survey_input$Graduate_Date <- valid_survey_input$Graduate_Date#
#
working_survey_input$Terms_to_Graduate <- numeric(nrow(working_survey_input))#
#
# determine the new values for number of terms to graduation by hash#
for (item in seq(along = working_survey_input$Graduate_Date)) {#
    if (working_survey_input$Graduate_Date[item] == "")#
        working_survey_input$Terms_to_Graduate[item] <- NA#
#
    if (working_survey_input$Graduate_Date[item] != "")#
        working_survey_input$Terms_to_Graduate[item] <-#
            values(mydate_dict, keys = working_survey_input$Graduate_Date[item])   #
    }
# examine the structure of the working_survey_data so far#
print(str(working_survey_data))
# examine the structure of the working_survey_data so far#
print(str(working_survey_input))
# use R lattice package to create histogram for groups defined by#
# the number of SAS courses taken#
#
# it is often useful to set up a data frame just for plotting#
plotting_data_frame <- #
    working_survey_input[, c("Courses_Completed", "SAS_Courses")]#
plotting_data_frame$SAS_Courses <- #
    factor(plotting_data_frame$SAS_Courses,#
        levels = c(0, 1, 2), #
        labels = c("No SAS Courses", "PREDICT 410 Only", "PREDICT 410/411"))#
# set up function for lattice panels for up to five groups#
# use special colors for the panel rectangles and text for group labels#
myStripRectColorsGrey <- c(HEX_GREY, HEX_GREY, HEX_GREY, HEX_GREY, HEX_GREY)#
myStripTextColorsBlack <- c(HEX_BLACK, HEX_BLACK, HEX_BLACK, HEX_BLACK, HEX_GREY)#
#
myStripStyleGreyBlack <- function(which.panel, factor.levels, ...) {#
    panel.rect(0, 0, 1, 1, border = 1, #
        col = myStripRectColorsGrey[which.panel])#
    panel.text(x = 0.5, y = 0.5, #
        col = myStripTextColorsBlack[which.panel],#
        lab = paste(factor.levels[which.panel]))#
    }#
#
pdf(file = "fig_lattice_terms_to_graduate_ALL_STUDENTS.pdf", #
    width = 7.5, height = 8, paper = "letter")#
lattice_plot_object <- histogram(~Terms_to_Graduate | SAS_Courses, #
    data = plotting_data_frame,             #
    strip = myStripStyleGreyBlack,#
    col = "darkblue", border = "lightgrey",#
    type = "percent", xlab = "Expected Number of Terms Before Graduation",#
    ylab = "Percentage of Students in Group",#
    breaks = 0:14,#
    layout = c(1,1),#
    main = "Expected Number of Terms Before Graduation for SAS Groups")#
print(lattice_plot_object)  #
dev.off()
# use R lattice package to create histogram for groups defined by#
# the number of SAS courses taken#
#
# it is often useful to set up a data frame just for plotting#
plotting_data_frame <- #
    working_survey_input[, c("Terms_to_Graduate", "SAS_Courses")]#
plotting_data_frame$SAS_Courses <- #
    factor(plotting_data_frame$SAS_Courses,#
        levels = c(0, 1, 2), #
        labels = c("No SAS Courses", "PREDICT 410 Only", "PREDICT 410/411"))#
# set up function for lattice panels for up to five groups#
# use special colors for the panel rectangles and text for group labels#
myStripRectColorsGrey <- c(HEX_GREY, HEX_GREY, HEX_GREY, HEX_GREY, HEX_GREY)#
myStripTextColorsBlack <- c(HEX_BLACK, HEX_BLACK, HEX_BLACK, HEX_BLACK, HEX_GREY)#
#
myStripStyleGreyBlack <- function(which.panel, factor.levels, ...) {#
    panel.rect(0, 0, 1, 1, border = 1, #
        col = myStripRectColorsGrey[which.panel])#
    panel.text(x = 0.5, y = 0.5, #
        col = myStripTextColorsBlack[which.panel],#
        lab = paste(factor.levels[which.panel]))#
    }#
#
pdf(file = "fig_lattice_terms_to_graduate_ALL_STUDENTS.pdf", #
    width = 7.5, height = 8, paper = "letter")#
lattice_plot_object <- histogram(~Terms_to_Graduate | SAS_Courses, #
    data = plotting_data_frame,             #
    strip = myStripStyleGreyBlack,#
    col = "darkblue", border = "lightgrey",#
    type = "percent", xlab = "Expected Number of Terms Before Graduation",#
    ylab = "Percentage of Students in Group",#
    breaks = 0:14,#
    layout = c(1,1),#
    main = "Expected Number of Terms Before Graduation for SAS Groups")#
print(lattice_plot_object)  #
dev.off()
pdf(file = "fig_lattice_terms_to_graduate_by_sas_courses.pdf", #
    width = 7.5, height = 8, paper = "letter")#
lattice_plot_object <- histogram(~Terms_to_Graduate | SAS_Courses, #
    data = plotting_data_frame,             #
    strip = myStripStyleGreyBlack,#
    col = "darkblue", border = "lightgrey",#
    type = "percent", xlab = "Expected Number of Terms Before Graduation",#
    ylab = "Percentage of Students in Group",#
    breaks = 0:14,#
    layout = c(1,1),#
    main = "Expected Number of Terms Before Graduation for SAS Groups")#
print(lattice_plot_object)  #
dev.off()
pdf(file = "fig_lattice_terms_to_graduate_by_sas_courses.pdf", #
    width = 7.5, height = 8, paper = "letter")#
lattice_plot_object <- histogram(~Terms_to_Graduate | SAS_Courses, #
    data = plotting_data_frame,             #
    strip = myStripStyleGreyBlack,#
    col = "darkblue", border = "lightgrey",#
    type = "percent", xlab = "Expected Number of Terms Before Graduation",#
    ylab = "Percentage of Students in Group",#
    breaks = 0:14,#
    layout = c(1,3),#
    main = "Expected Number of Terms Before Graduation for SAS Groups")#
print(lattice_plot_object)  #
dev.off()
pdf(file = "fig_plot_simple_scatter_plot.pdf", #
    width = 7.5, height = 7.5, paper = "letter")#
with(working_survey_input, #
    plot(Courses_Completed, Terms_to_Graduate, #
        las = 1,#
        xlab = "Number of Coures Completed",#
        ylab = "Expected Number of Terms Before Graduation"))#
dev.off()
# use R standard graphics to make a scatter plot#
# jittered due to overplotting issue#
pdf(file = "fig_plot_simple_scatter_plot.pdf", #
    width = 7.5, height = 7.5, paper = "letter")#
with(working_survey_input, #
    plot(Courses_Completed, jitter(Terms_to_Graduate), #
        las = 1,#
        xlab = "Number of Coures Completed",#
        ylab = "Expected Number of Terms Before Graduation"))#
dev.off()
pdf(file = "fig_plot_simple_scatter_plot.pdf", #
    width = 7.5, height = 7.5, paper = "letter")#
with(working_survey_input, #
    plot(jitter(Courses_Completed), jitter(Terms_to_Graduate), #
        las = 1,#
        xlab = "Number of Coures Completed",#
        ylab = "Expected Number of Terms Before Graduation"))#
dev.off()
# use R standard graphics to make a scatter plot#
# jittered with open-circle points to avoid overplotting issue#
pdf(file = "fig_plot_simple_scatter_plot.pdf", #
    width = 7.5, height = 7.5, paper = "letter")#
with(working_survey_input, #
    plot(jitter(Courses_Completed), jitter(Terms_to_Graduate), #
        las = 1,#
        xlab = "Number of Coures Completed",#
        ylab = "Expected Number of Terms Before Graduation"))#
dev.off()
source("assignment_1_jump_start_v001.R")
source("assignment_1_jump_start_v001.R")
